cd h:/papka - óâèäåòü ïàïêó
git init - äîáàâèòü ïàïêó â ğåïîçèòîğèé
git status - îòñëåäèòü
git add . -äîáàâèòü ôàéëû 
git remote add origin https://github.com/KseniaFonotova/-Skanatek-.git - äîáàâèòü â ğåïîçèòîğèé
git push -u origin master
 git commit -m "first com" - êîììèò
git reset --hard HEAD~1 óäàëåíèå êîììèòà èç âåòêè

git init: Initializes a new Git repository. Until you run this command inside a repository or directory, 
it’s just a regular folder. Only after you input this does it accept further Git commands.

git config: Short for “configure,” this is most useful when you’re setting up Git for the first time.

git help: Forgot a command? Type this into the command line to bring up the 21 most common git commands. 
You can also be more specific and type “git help init” or another term to figure out how to use and configure 
a specific git command.

git status: Check the status of your repository. See which files are inside it, which changes still need to be committed,
 and which branch of the repository you’re currently working on.

git add: This does not add new files to your repository. Instead, it brings new files to Git’s attention. 
After you add files, they’re included in Git’s “snapshots” of the repository.

git commit: Git’s most important command. After you make any sort of change, 
you input this in order to take a “snapshot” of the repository. Usually it goes git commit -m “Message here.” 
The -m indicates that the following section of the command should be read as a message.

git branch: Working with multiple collaborators and want to make changes on your own?
 This command will let you build a new branch, or timeline of commits, 
of changes and file additions that are completely your own. Your title goes after the command. 
If you wanted a new branch called “cats,” you’d type git branch cats.

git checkout: Literally allows you to “check out” a repository that you are not currently inside. 
This is a navigational command that lets you move to the repository you want to check. 
You can use this command as git checkout master to look at the master branch, or git checkout cats to 
look at another branch.

git merge: When you’re done working on a branch, you can merge your changes back to the master branch,
 which is visible to all collaborators. git merge cats would take all the changes you made to the “cats”
 branch and add them to the master.

git push: If you’re working on your local computer, and want your commits to be visible online on GitHub as well,
 you “push” the changes up to GitHub with this command.

git pull: If you’re working on your local computer and want the most up-to-date version of your repository to work
 with, you “pull” the changes down from GitHub with this command.

create a new branch named "feature_x" and switch to it using
git checkout -b feature_x
switch back to master
git checkout master
and delete the branch again
git branch -d feature_x
a branch is not available to others unless you push the branch to your remote repository

git push origin <branch>
to update your local repository to the newest commit, execute 
git pull
in your working directory to fetch and merge remote changes.
to merge another branch into your active branch (e.g. master), use
git merge <branch>
in both cases git tries to auto-merge changes. Unfortunately, this is not always possible and results in conflicts. 
You are responsible to merge those conflicts manually by editing the files shown by git. After changing, you need to mark them as merged with
git add <filename>
before merging changes, you can also preview them by using
git diff <source_branch> <target_branch>

tagging
it's recommended to create tags for software releases. this is a known concept, which also exists in SVN. You can create a new tag named 1.0.0 by executing
git tag 1.0.0 1b2e1d63ff
the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. You can get the commit id by looking at the... 

log
in its simplest form, you can study repository history using.. git log
You can add a lot of parameters to make the log look like what you want. To see only the commits of a certain author:
git log --author=bob
To see a very compressed log where each commit is one line:
git log --pretty=oneline
Or maybe you want to see an ASCII art tree of all the branches, decorated with the names of tags and branches: 
git log --graph --oneline --decorate --all
See only which files have changed: 
git log --name-status
These are just a few of the possible parameters you can use. For more, see git log --help
replace local changes
In case you did something wrong, which for sure never happens ;), you can replace local changes using the command
git checkout -- <filename>
this replaces the changes in your working tree with the last content in HEAD. Changes already added to the index, as well as new files, will be kept.

If you instead want to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it like this
git fetch origin
git reset --hard origin/master

useful hints
built-in git GUI
gitk
use colorful git output
git config color.ui true
show log on just one line per commit
git config format.pretty oneline
use interactive adding
git add -i

